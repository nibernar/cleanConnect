/**
 * Utilitaires de d√©bogage et de gestion des erreurs API
 */

// Nombre maximum de tentatives pour les appels API
const MAX_RETRIES = 2;
// D√©lai entre les tentatives (augmentation exponentielle)
const RETRY_DELAY_MS = 1000;

/**
 * Journalise une requ√™te API pour le d√©bogage
 * @param {string} method - La m√©thode HTTP
 * @param {string} url - L'URL de la requ√™te 
 * @param {Object} data - Les donn√©es de la requ√™te (optionnel)
 */
export function logApiRequest(method, url, data) {
  console.log(`üì§ API Request: ${method.toUpperCase()} ${url}`);
  if (data) {
    console.log('üì¶ Request Data:', typeof data === 'object' ? JSON.stringify(data, null, 2) : data);
  }
}

/**
 * Journalise une r√©ponse API pour le d√©bogage
 * @param {number} status - Le code de statut HTTP
 * @param {string} method - La m√©thode HTTP
 * @param {string} url - L'URL de la requ√™te
 * @param {Object} data - Les donn√©es de r√©ponse (optionnel)
 */
export function logApiResponse(status, method, url, data) {
  if (status >= 200 && status < 300) {
    console.log(`‚úÖ API Response Success: ${status} ${method.toUpperCase()} ${url}`);
  } else {
    console.error(`‚ùå API Response Error: ${status} ${method.toUpperCase()} ${url}`, data);
  }
}

/**
 * Obtient l'URL de base de l'API √† partir d'Expo Constants ou d'une valeur par d√©faut
 * @returns {string} L'URL de base de l'API
 */
export function getApiBaseUrl() {
  try {
    // Utiliser une valeur par d√©faut si l'importation √©choue
    return 'http://localhost:5001/api/v1';
  } catch (error) {
    console.warn('Failed to get API URL from config, using default');
    return 'http://localhost:5001/api/v1';
  }
}

/**
 * V√©rifie si un token d'authentification est configur√© dans les en-t√™tes
 * @param {Object} headers - Les en-t√™tes HTTP
 * @returns {boolean} True si un token est configur√©
 */
export function checkAuthToken(headers) {
  return Boolean(
    headers && 
    (headers.Authorization || headers.authorization)
  );
}

/**
 * Fonction utilitaire pour appeler une API avec valeur de fallback en cas d'erreur
 * Utile pour √©viter les erreurs fatales sur les √©crans o√π certaines donn√©es sont optionnelles
 * 
 * @param {Function} apiCall - La fonction d'appel API √† ex√©cuter
 * @param {Object} options - Options de configuration
 * @param {string} options.endpointType - Type d'endpoint pour le logging
 * @param {string} options.userType - Type d'utilisateur pour le contexte
 * @param {any} options.fallback - Valeur de fallback en cas d'erreur
 * @returns {Promise<any>} La r√©ponse API ou la valeur de fallback
 */
export async function apiCallWithDebugFallback(apiCall, options = {}) {
  const { endpointType, userType, fallback = null } = options;
  
  try {
    // Journaliser le contexte de l'appel
    console.log(`üîç API ${endpointType || 'call'} for ${userType || 'user'}`);
    
    // Appeler l'API avec syst√®me de retry
    return await apiCallWithRetry(apiCall);
  } catch (error) {
    console.error(`‚ùå API Error: ${endpointType || 'call'} failed`, error);
    console.log(`‚ö†Ô∏è Using fallback data for ${endpointType}`);
    
    // Retourner la valeur de fallback
    return fallback;
  }
}

/**
 * Fonction utilitaire pour r√©essayer automatiquement un appel API en cas d'erreur
 * 
 * @param {Function} apiCall - La fonction d'appel API √† ex√©cuter
 * @param {Object} options - Options de configuration
 * @param {number} options.maxRetries - Nombre maximum de tentatives
 * @param {number} options.delayMs - D√©lai entre les tentatives
 * @returns {Promise<any>} La r√©ponse API
 */
export async function apiCallWithRetry(apiCall, options = {}) {
  const { maxRetries = MAX_RETRIES, delayMs = RETRY_DELAY_MS } = options;
  
  let lastError;
  
  // Essayer jusqu'√† maxRetries fois
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      // Si c'est une r√©essai, journaliser
      if (attempt > 0) {
        console.log(`üîÑ Retry attempt ${attempt}/${maxRetries}`);
      }
      
      // Effectuer l'appel
      const response = await apiCall();
      return response;
    } catch (error) {
      lastError = error;
      
      // Extraire le code de statut HTTP
      const status = error.response?.status;
      
      console.error(`‚ùå API Error: API Call failed on attempt ${attempt}`, error);
      
      // Ne pas r√©essayer pour les erreurs 4xx (sauf 429 - too many requests)
      if (status >= 400 && status < 500 && status !== 429) {
        console.log(`‚õî Not retrying due to client error (${status})`);
        break;
      }
      
      // Attendre avant de r√©essayer (sauf sur la derni√®re tentative)
      if (attempt < maxRetries) {
        const waitTime = delayMs * Math.pow(2, attempt);
        console.log(`‚è±Ô∏è Waiting ${waitTime}ms before retry`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }
  }
  
  // Si toutes les tentatives ont √©chou√©
  console.error(`‚ùå All ${maxRetries} retry attempts failed`);
  throw lastError;
}