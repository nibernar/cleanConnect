/**
 * Utilitaires pour le d√©bogage de l'int√©gration frontend/backend
 */

const DEBUG_ENABLED = true; // Activer/d√©sactiver le d√©bogage global

/**
 * Log transformations de donn√©es pour d√©bogage
 * @param {string} direction - 'to-backend' ou 'to-frontend'
 * @param {Object} inputData - Donn√©es avant transformation
 * @param {Object} outputData - Donn√©es apr√®s transformation
 */
export const logTransformation = (direction, inputData, outputData) => {
  if (!DEBUG_ENABLED) return;
  
  console.group(`üîÑ Transformation de donn√©es (${direction})`);
  console.log('üì• Donn√©es d\'entr√©e:', inputData);
  console.log('üì§ Donn√©es de sortie:', outputData);
  console.groupEnd();
};

/**
 * Log requ√™te API pour d√©bogage
 * @param {string} method - M√©thode HTTP (GET, POST, etc.)
 * @param {string} url - URL de la requ√™te
 * @param {Object} data - Donn√©es envoy√©es (pour POST, PUT)
 */
export const logApiRequest = (method, url, data) => {
  if (!DEBUG_ENABLED) return;
  
  console.group(`üåê Requ√™te API (${method})`);
  console.log('üîó URL:', url);
  if (data) {
    console.log('üì¶ Donn√©es:', data);
  }
  console.groupEnd();
};

/**
 * Log r√©ponse API pour d√©bogage
 * @param {string} method - M√©thode HTTP (GET, POST, etc.)
 * @param {string} url - URL de la requ√™te
 * @param {Object} response - R√©ponse re√ßue
 * @param {Object} error - Erreur √©ventuelle
 */
export const logApiResponse = (method, url, response, error) => {
  if (!DEBUG_ENABLED) return;
  
  if (error) {
    console.group(`‚ùå Erreur API (${method} ${url})`);
    console.error('‚ö†Ô∏è Erreur:', error);
    console.groupEnd();
    return;
  }
  
  console.group(`‚úÖ R√©ponse API (${method} ${url})`);
  console.log('üì¶ Donn√©es:', response);
  console.groupEnd();
};

/**
 * Mesurer le temps d'ex√©cution d'une fonction
 * @param {Function} fn - Fonction √† mesurer
 * @param {string} label - Label pour identifier la mesure
 * @returns {Function} - Fonction avec mesure de performance
 */
export const measurePerformance = (fn, label) => {
  return async (...args) => {
    if (!DEBUG_ENABLED) return fn(...args);
    
    console.time(`‚è±Ô∏è ${label}`);
    try {
      const result = await fn(...args);
      console.timeEnd(`‚è±Ô∏è ${label}`);
      return result;
    } catch (error) {
      console.timeEnd(`‚è±Ô∏è ${label}`);
      throw error;
    }
  };
};

/**
 * Utilitaire pour inspecter l'√©tat Redux pour d√©bogage
 * @param {Object} state - √âtat Redux
 * @param {string} path - Chemin dans l'√©tat Redux (ex: 'listings.myListings')
 */
export const inspectReduxState = (state, path) => {
  if (!DEBUG_ENABLED) return;
  
  const parts = path.split('.');
  let value = state;
  
  for (const part of parts) {
    if (value && typeof value === 'object' && part in value) {
      value = value[part];
    } else {
      console.log(`‚ùì Chemin invalide: ${path}`);
      return;
    }
  }
  
  console.group(`üîç Inspection Redux: ${path}`);
  console.log(value);
  console.groupEnd();
};

export default {
  logTransformation,
  logApiRequest,
  logApiResponse,
  measurePerformance,
  inspectReduxState
};